// Generated by CoffeeScript 1.4.0
(function() {
  var dumpScript, env, fs, path, utils;

  env = require("../env");

  fs = require("graceful-fs");

  path = require("path");

  utils = require('../util');

  exports.usage = "TAB 自动补全";

  dumpScript = function() {
    var p;
    p = path.resolve(__dirname, "../completion.sh");
    return fs.readFile(p, "utf8", function(er, d) {
      if (er) {
        utils.logger.error(er);
        return null;
      }
      d = d.replace(/^#!.*?\n/, "");
      return console.log(d);
    });
  };

  exports.run = function(options) {
    var aliases, args, command, content, i, keys, line, list, opts, partialLine, partialWord, partialWords, point, result, w, word, words;
    if (process.platform === "win32") {
      return utils.logger.error("fekit completion 不支持 windows");
    }
    if (void 0 === process.env.COMP_CWORD || void 0 === process.env.COMP_LINE || void 0 === process.env.COMP_POINT) {
      return dumpScript();
    }
    console.error(process.env.COMP_CWORD);
    console.error(process.env.COMP_LINE);
    console.error(process.env.COMP_POINT);
    args = options._.slice(1);
    w = +process.env.COMP_CWORD;
    words = args;
    word = words[w];
    line = process.env.COMP_LINE;
    point = +process.env.COMP_POINT;
    partialLine = line.substr(0, point);
    partialWords = words.slice(0, w);
    partialWord = args[w];
    i = partialWord.length;
    while (partialWord.substr(0, i) !== partialLine.substr(-1 * i) && i > 0) {
      i -= 1;
    }
    partialWord = partialWord.substr(0, i);
    partialWords.push(partialWord);
    opts = {
      words: words,
      w: w,
      word: word,
      line: line,
      lineLength: line.length,
      point: point,
      partialLine: partialLine,
      partialWords: partialWords,
      partialWord: partialWord,
      raw: args
    };
    console.error(opts);
    if (partialWords.length === 2) {
      list = fs.readdirSync(__dirname);
      list = list.concat(env.getExtensions());
      list = list.map(function(f) {
        if (typeof f === "string") {
          return utils.path.fname(f);
        }
        return f.name;
      });
      list = list.filter(function(f) {
        return !/^_/.test(f);
      });
      result = list.filter(function(c) {
        return c.indexOf(opts.partialWord) === 0;
      });
      return console.log(result.join("\n"));
    }
    if (partialWords.length > 2) {
      try {
        command = opts.partialWords[1];
        content = fs.readFileSync(path.resolve(__dirname, "./" + command + ".js"));
        content = content.toString();
        keys = [];
        aliases = [];
        content.replace(/optimist\.alias\('(\w+)', '(\w+)'\);/g, function(match, k, a) {
          keys.push("-" + k);
          return aliases.push("--" + a);
        });
        if (keys.length === 0 || aliases.length === 0) {
          return null;
        }
        keys.push("-h");
        aliases.push("--help");
        if (/^--/.test(opts.partialWord) || opts.partialWord === "") {
          result = aliases;
        } else {
          result = keys;
        }
        result = result.filter(function(c) {
          return c.indexOf(opts.partialWord) === 0;
        });
        return console.log(result.join("\n"));
      } catch (e) {
        return console.error(e);
      }
    }
  };

}).call(this);
