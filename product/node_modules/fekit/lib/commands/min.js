// Generated by CoffeeScript 1.4.0
(function() {
  var cc, computecluster, max, save_versions_mapping, syspath, utils;

  syspath = require('path');

  utils = require("../util");

  computecluster = require('compute-cluster');

  max = Math.ceil(require('os').cpus().length * 1.25);

  if (max > 5) {
    max = 5;
  }

  cc = new computecluster({
    module: utils.path.join(__dirname, '_min_worker.js'),
    max_backlog: -1,
    max_processes: max
  });

  exports.usage = "压缩/混淆项目文件";

  exports.set_options = function(optimist) {
    optimist.alias('o', 'output');
    optimist.describe('o', '指定单个文件编译的输出位置');
    optimist.alias('n', 'nopack');
    optimist.describe('n', '不进行压缩处理');
    optimist.alias('c', 'noSplitCSS');
    optimist.describe('c', '不分割 css 为多行形式，默认分割');
    optimist.alias('v', 'onlyVersionFile');
    optimist.describe('v', '在 /ver 目录中只生成 version 文件');
    optimist.alias('m', 'onlyMappingFile');
    optimist.describe('m', '在 /ver 目录中只生成 mapping 文件');
    optimist.alias('e', 'environment');
    return optimist.describe('e', '设置环境为`local`,`dev`,`beta`或`prd`');
  };

  save_versions_mapping = function(mapping_file_path, mapping) {
    var k, str, v;
    str = [];
    for (k in mapping) {
      v = mapping[k];
      k = k.replace(/\.[^.\/\\]+$/, syspath.extname(v.minpath));
      str.push(k.replace(/\\/g, "/") + '#' + v.ver);
    }
    return utils.file.io.write(mapping_file_path, str.join('\n'));
  };

  exports.run = function(options) {
    var cl, conf, done, i, list, script_global, toRun, vertype, _i, _len, _results;
    utils.logger.log("fekit(" + utils.version + ") min");
    utils.file.rmrf(syspath.join(options.cwd, './ver/'));
    utils.file.rmrf(syspath.join(options.cwd, './prd/'));
    vertype = 0;
    if (options.onlyMappingFile && options.onlyVersionFile) {
      vertype = 0;
    } else if (!options.onlyMappingFile && options.onlyVersionFile) {
      vertype = 1;
    } else if (options.onlyMappingFile && !options.onlyVersionFile) {
      vertype = 2;
    }
    script_global = {
      EXPORT_LIST: [],
      EXPORT_MAP: {}
    };
    conf = utils.config.parse(options.cwd);
    conf.each_export_files(function(srcpath, parents, opts) {
      var iter;
      iter = {
        url: srcpath,
        path: syspath.join("src", opts.partial_path)
      };
      script_global.EXPORT_LIST.push(iter);
      return script_global.EXPORT_MAP[opts.partial_path] = iter;
    });
    conf.doScript("premin", script_global);
    done = function() {
      if (vertype === 0 || vertype === 2) {
        save_versions_mapping(syspath.join(options.cwd, './ver/versions.mapping'), script_global.EXPORT_MAP);
      }
      conf.doRefs(options);
      conf.doScript("postmin", script_global);
      return utils.logger.log("DONE.");
    };
    list = conf.get_export_list();
    toRun = list.length;
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      i = list[_i];
      cl = function(i) {
        return cc.enqueue({
          options: options,
          file: i,
          vertype: vertype
        }, function(err, result) {
          var dest, md5code, n, o, _ref, _ref1;
          if (err) {
            utils.logger.error(err);
            cc.exit();
            utils.exit(1);
          }
          md5code = result[0];
          dest = result[1];
          conf = utils.config.parse(options.cwd);
          o = conf.get_export_info(i);
          n = o.opts.partial_path;
          if ((_ref = script_global.EXPORT_MAP[n]) != null) {
            _ref.ver = o.opts.no_version ? "" : md5code;
          }
          if ((_ref1 = script_global.EXPORT_MAP[n]) != null) {
            _ref1.minpath = dest.replace(options.cwd, "");
          }
          if (--toRun === 0) {
            done();
            return utils.exit(0);
          }
        });
      };
      _results.push(cl(i));
    }
    return _results;
  };

}).call(this);
