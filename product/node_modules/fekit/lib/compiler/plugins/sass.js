// Generated by CoffeeScript 1.4.0
(function() {
  var css, digits, displayErrorContext, extNames, fixFilePath, fixLineNum, fixPathSeq, fs, getWholeScssFile, sass, syspath, utils,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  utils = require('../../util');

  css = require('./css');

  fs = require('fs');

  syspath = require('path');

  sass = require('node-sass-china');

  extNames = ['.sass', '.scss'];

  digits = 6;

  fixLineNum = function(lineNum) {
    var $0, blankNum, _i;
    blankNum = digits - (lineNum + '').length;
    for ($0 = _i = 1; 1 <= blankNum ? _i <= blankNum : _i >= blankNum; $0 = 1 <= blankNum ? ++_i : --_i) {
      lineNum = ' ' + lineNum;
    }
    return lineNum;
  };

  displayErrorContext = function(txt, lineNum) {
    var lines, start;
    start = lineNum - 5;
    lines = txt.split('\n').splice(start, 10);
    lines = lines.map(function(line, index) {
      var content, ln;
      ln = start + index + 1;
      content = "" + (fixLineNum(ln)) + ":" + (ln === lineNum ? '->' : '  ') + " " + line;
      return content;
    });
    return lines.join('\n');
  };

  fixFilePath = function(filePath) {
    var baseName, dirName, eName, extName, privatePath, _i, _len;
    extName = syspath.extname(filePath);
    baseName = syspath.basename(filePath);
    dirName = syspath.dirname(filePath);
    if (extName && fs.existsSync(filePath)) {
      return filePath;
    }
    if (!extName) {
      for (_i = 0, _len = extNames.length; _i < _len; _i++) {
        eName = extNames[_i];
        if (fs.existsSync(filePath + eName)) {
          return filePath + eName;
        }
        privatePath = syspath.join(dirName, '_' + baseName + eName);
        if (fs.existsSync(privatePath)) {
          return privatePath;
        }
      }
    } else {
      privatePath = syspath.join(dirName, '_' + baseName);
      if (fs.existsSync(privatePath)) {
        return privatePath;
      }
    }
    throw new Error('找不到import文件: ' + filePath);
  };

  fixPathSeq = process.platform === "win32" ? function(path) {
    return path.replace(/\\/g, '/');
  } : function(path) {
    return path;
  };

  getWholeScssFile = function(filePath, dir, imports) {
    var data;
    imports = imports || {};
    if (imports[filePath] !== true) {
      imports[filePath] = true;
      data = '\n' + new utils.file.reader().read(filePath);
      data = data.replace(/\/\*(.|\s)*?\*\//gm, '').replace(/\n\s*\/\/.*(?=[\n\r])/g, '');
      data = data.replace(/\n+/g, '\n');
      return data = data.replace(/@import(.*);/g, function($1, $2) {
        var content, ret;
        ret = '';
        content = $2.replace(/url\(.*[\'\"]([^\'^\"]+)[\'\"].*\)/g, function($3, $4) {
          var importPath, relativePath, txt, _ref;
          if ($4.indexOf('://') > -1) {
            ret += "@import url(\"" + $4 + "\");\n";
          } else {
            importPath = fixFilePath(syspath.join(syspath.dirname(filePath), $4));
            if (_ref = syspath.extname(importPath), __indexOf.call(extNames, _ref) >= 0) {
              try {
                txt = getWholeScssFile(importPath, dir);
                ret += sass.renderSync({
                  data: txt,
                  includePaths: [dir],
                  outputStyle: "expanded"
                }).css.toString() + '\n';
              } catch (err) {
                throw new Error("文件 " + filePath + " 编译错误: at line " + err.line + "  column " + err.column + ": " + err.message + "\n" + (displayErrorContext(txt, err.line)));
              }
            } else {
              relativePath = fixPathSeq(syspath.relative(dir, importPath));
              ret += "@import url(\"" + relativePath + "\");\n";
            }
          }
          return '';
        });
        content.replace(/[\'\"]([^\'^\"]+)[\'\"]/g, function($5, $6) {
          var importPath, relativePath, _ref;
          if ($6.indexOf('://') > -1) {
            return ret += "@import \"" + $6 + "\";\n";
          } else {
            importPath = fixFilePath(syspath.join(syspath.dirname(filePath), $6));
            if (_ref = syspath.extname(importPath), __indexOf.call(extNames, _ref) >= 0) {
              return ret += getWholeScssFile(importPath, dir, imports) + '\n';
            } else {
              relativePath = fixPathSeq(syspath.relative(dir, importPath));
              return ret += "@import \"" + relativePath + "\";\n";
            }
          }
        });
        return ret;
      });
    } else {
      return '';
    }
  };

  exports.contentType = "css";

  exports.process = function(txt, path, module, cb) {
    var dir, fail, succ;
    dir = syspath.dirname(path);
    succ = function(code) {
      return cb(null, css.ddns(code, module));
    };
    fail = function(err) {
      return cb(err);
    };
    try {
      txt = getWholeScssFile(path, dir);
      return sass.render({
        data: txt,
        includePaths: [dir],
        outputStyle: "expanded"
      }, function(err, result) {
        if (err) {
          return fail("文件" + err.file + "编译错误: at line " + err.line + " column " + err.column + ": " + err.message + "\n" + (displayErrorContext(txt, err.line)));
        } else {
          return succ(result.css.toString());
        }
      });
    } catch (err) {
      return fail(err);
    }
  };

}).call(this);
